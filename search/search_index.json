{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#accelerated-weka-easy-gpu-support-using-weka","title":"Accelerated WEKA - easy GPU support using WEKA","text":"<p>Accelerated WEKA unifies the WEKA software, a well-known and open-source Java software, with new technologies that leverage the GPU to shorten the execution time of ML algorithms. It has two benefits aimed at users without expertise in system configuration and coding: an easy installation and a GUI that guides the configuration and execution of the ML tasks. Accelerated WEKA is a collection of packages available for WEKA (e.g., WDL4J, wekaPython, and wekaRAPIDS). Accelerated WEKA can be easiy installed and anyone can extend it to support new tools and algorithms.</p>"},{"location":"#easy-to-install-and-use","title":"Easy to install and use","text":"<p>One of the best features of Accelerated WEKA is the installation method, which helps users without expertise in system configuration to bypass such issues as setting up different dependencies and environment variables. In addition, everything is accessible via the Weka GUI, the commandline and programmatically in Java.</p> <p>Check the Getting Started section.</p>"},{"location":"about/","title":"Package links","text":"<ul> <li>WEKA</li> <li>wekaPython</li> <li>wekaDeeplearning4j</li> <li>wekaRAPIDS</li> </ul>"},{"location":"user_guide/architecture/","title":"Architecture","text":"<p>The building blocks of Accelerated WEKA are packages like WekaDeeplearning4j and wekaRAPIDS (inspired by wekaPython). </p> <p>WekaDeeplearning4j (WDL4J) already supports GPU processing but has very specific needs in terms of libraries and environment configuration. WDL4J provides WEKA wrappers for the Deeplearning4j library.</p> <p>On the other hand, wekaPython originally provided Python integration by creating a server and communicating with it through sockets, enabling the user to execute scikit-learn ML algorithms (or even XGBoost) inside the WEKA workbench. Furthermore, wekaRAPIDS provide integration with RAPIDS cuML library using a similar technique to wekaPython.</p> <p>Together, both packages provide enhanced functionality and performance inside the user-friendly WEKA workbench. In fact, Accelerated WEKA goes a step further in the direction of performance by improving the communication between the JVM and Python interpreter. It does so by using alternatives like Apache Arrow and GPU memory sharing. This enables efficient data transfer between the two languages.</p> <p>Furthermore, Accelerated WEKA provides integration with the RAPIDS cuML library, which implements machine learning algorithms that are accelerated on NVIDIA GPUs. Some cuML algorithms can even support multi-GPU solutions.</p>"},{"location":"user_guide/features/","title":"Features","text":"<p>Accelerated WEKA provides support to all algorithms from the previous packages. In addition, wekaRAPIDS provides integration with the RAPIDS library, which offers both Single and Multi-GPU support. Below, you can find the RAPIDS algorithms currently supported by wekaRAPIDS.  </p>"},{"location":"user_guide/features/#single-gpu-support","title":"Single GPU support","text":"<p>The algorithms currently supported by Accelerated WEKA are:</p> <ul> <li>LinearRegression</li> <li>LogisticRegression</li> <li>Ridge</li> <li>Lasso</li> <li>ElasticNet</li> <li>MBSGDClassifier</li> <li>MBSGDRegressor</li> <li>MultinomialNB</li> <li>BernoulliNB</li> <li>GaussianNB</li> <li>RandomForestClassifier</li> <li>RandomForestRegressor</li> <li>SVC</li> <li>SVR</li> <li>LinearSVC</li> <li>KNeighborsRegressor</li> <li>KNeighborsClassifier</li> </ul>"},{"location":"user_guide/features/#multi-gpu-support","title":"Multi-GPU support","text":"<p>The algorithms supported by Accelerated WEKA in multi-GPU mode are:</p> <ul> <li>KNeighborsRegressor</li> <li>KNeighborsClassifier</li> <li>LinearRegression</li> <li>Ridge</li> <li>Lasso</li> <li>ElasticNet</li> <li>MultinomialNB</li> <li>CD</li> </ul>"},{"location":"user_guide/getting_started/","title":"Getting Started","text":"<p>AcceleratedWEKA offers the same options as the standard WEKA. </p>"},{"location":"user_guide/getting_started/#running-a-quick-example-with-the-gui","title":"Running a quick example with the GUI","text":"<p>&lt;!-- The installation of Accelerated WEKA itself is pretty simple. It is available through Conda, a system providing package and environment management. Such capability means that a simple command can install all dependencies for the project. For example, on a Linux machine, issue the following command in a terminal for installing Accelerated WEKA and all dependencies.</p> <pre><code>conda create --solver=libmamba -n accelweka -c rapidsai -c nvidia -c conda-forge  -c waikato weka\n</code></pre> <p>Once Conda has created the environment, activate it with the following command:</p> <pre><code>conda activate accelweka\n</code></pre> <p>This terminal instance just loaded all dependencies for Accelerated WEKA. Launch WEKA GUI Chooser with the command:</p> <pre><code>weka\n``` --&gt;\nLaunch WEKA with the command:\n```bash\nweka\n</code></pre> <p>The following window will appear  From there, click the Explorer button to access the functionalities of Accelerated WEKA.</p> <p></p> <p>In the WEKA Explorer window, click the Open file button to select a dataset file. WEKA works with ARFF files but can read from CSVs. Converting from CSVs can be pretty straightforward or require some configuration by the user, depending on the types of the attributes.</p> <p></p> <p>Assuming one does not want to preprocess the data, clicking the Classify tab will present the classification options to the user. </p> <p></p> <p>In this tab, the user can configure the classification algorithm and the test options that are going to be used in the experiment using the previously selected dataset. </p> <p>Clicking \u201cChoose\u201d button will show the implemented classifiers. Some might be disabled because of the dataset characteristics. To use Accelerated WEKA, the user must select rapids.CuMLClassifier. After that, clicking the bold CuMLClassifier will take the user to the option windows for the classifier.</p> <p></p> <p>After configuring the Classifier according to the previous step, the parameters will be shown in the text field beside the Choose button. After clicking Start, WEKA will start executing the chosen classifier with the dataset. The following figure shows the classifier in action, the Classifier output is showing debug and general information regarding the experiment, such as parameters, classifiers, dataset, and test options. The status shows the current state of the execution and the Weka bird on the bottom animates and flips from one side to the other while the experiment is running.</p> <p></p> <p>After the algorithm finishes the task it will output the summary of the execution with information regarding predictive performance and the time taken. In the following figure, the output shows the results for 10-fold cross-validation using the RandomForestClassifier from cuML through CuMLClassifier.</p> <p></p>"},{"location":"user_guide/getting_started/#running-a-quick-example-with-the-command-line","title":"Running a quick example with the command line","text":"<p>To run a quick example with the command line there are two easy steps.</p> <ol> <li>First, let's create a small dataset just to get the hang of how to use Accelerated WEKA (except the new learner classes, it is the same as using standard WEKA):</li> </ol> <pre><code>weka -main weka.Run .RandomRBF -n 10000 -a 50 &gt; RBFa50n10k.arff\n</code></pre> <ol> <li> <p>Let's go through the arguments of the above command:  </p> <ul> <li>weka is the main program, if you are using this command alone it launches the GUI. If you insert other arguments it can run tasks from the terminal.</li> <li>-main weka.Run indicates that we want to run the class weka.Run. In other words, we want to run straight from the command line, as opposed to the default weka.gui.GUIChooser that launches the GUI.</li> <li>.RandomRBF is the class that we want to use. This is a relative reference for the generator class that creates datasets with a Radial function.</li> <li>-n 10000 is one of the possible arguments for the RandomRBF class, it indicates that we want a dataset with ten thousand instances.</li> <li>-a 50 is another one of the RandomRBF arguments, it sets the number of attributes on the dataset to 50.</li> <li>&gt;&gt; RBFa50n10k.arff is the bash append operator followed by the file name that we want to write to.</li> </ul> </li> <li> <p>Then, let's use the newly created dataset to run some of the new RAPIDS algorithms using the GPU.</p> </li> </ol> <pre><code> weka -memory 48g -main weka.Run weka.classifiers.rapids.CuMLClassifier -split-percentage 80 -learner RandomForestClassifier -t $(pwd)/RBFa5kn10k.arff -py-command python\n</code></pre> <ol> <li> <p>Again, let's go through the arguments of the above command:</p> <ul> <li>-memory 48g sets the JVM maximum heap to 48 gigabytes.</li> <li>weka.classifiers.rapids.CuMLClassifier is the class responsible for integrating RAPIDS to WEKA.</li> <li>-split-percentage 80 means that we want to split the dataset into two smaller ones. We should train with 80% of the dataset and test with the remaining 20%.</li> <li>-learner RandomForestClassifier indicates which RAPIDS classifier/regressor we want to use in our experiment.</li> <li>-t $(pwd)/RBFa5kn10k.arff sets the previously created dataset as the input for our experiment.</li> <li>-py-command python is an optional command just to make sure we are using the correct python command and to modify the python call in case we need to.</li> </ul> </li> <li> <p>After the code is run, you will get the result. Check accuracy and time taken.</p> </li> <li> <p>Now, let's run another RAPIDS learner with the same dataset. This time, try using the Support Vector classifier (SVC):</p> </li> </ol> <pre><code>weka -memory 48g -main weka.Run weka.classifiers.rapids.CuMLClassifier -split-percentage 80 -learner SVC -t $(pwd)/RBFa5kn10k.arff -py-command python\n</code></pre> <ol> <li> <p>Notice the only difference is the argument of the -learner option.</p> </li> <li> <p>Compare the results with the RandomForestClassifier.</p> </li> <li> <p>Feel free to explore the other supported learners from RAPIDS. You can find a comprehensive list of them in Features.</p> </li> </ol>"},{"location":"user_guide/installation/","title":"Installation","text":"<p>Accelerated WEKA was designed to provide an easy installation process. Accelerated WEKA simplifies the installation process by using the conda environment. This makes straightforward to use Accelerated WEKA from the beginning. Once you have conda installed, Accelerated WEKA can be installed by issuing the following command:</p> <pre><code>conda create --solver=libmamba -n accelweka -c rapidsai -c conda-forge -c nvidia -c waikato weka\n</code></pre> <p>Conda will take care of the configuration of dependencies, and after finishing the installation, you can start using Accelerated WEKA immediately by activating the newly created environment.</p> <pre><code>conda activate accelweka\n</code></pre> <p>And finally, launching WEKA GUI</p> <pre><code>weka\n</code></pre> <p>Alternatively, you can run stuff from the command line:</p> <pre><code>weka -main weka.Run .RandomRBF -n 100000 -a 500 &gt; RBFa500n100k.arff\nweka -memory 48g -main weka.Run weka.classifiers.rapids.CuMLClassifier -split-percentage 80 -learner RandomForestClassifier -t $(pwd)/RBFa5kn1k.arff -py-command python\n</code></pre> <p>Or Programatically through Java.</p> <p>Feel welcome to open an issue on GitHub if you are having any trouble.</p>"}]}